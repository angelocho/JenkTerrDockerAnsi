pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "angelocho/ubuntu-serversshjenkins"
        IMAGE_VERSION = ":v1"
        NUMBEROFBUILD = "${env.BUILD_NUMBER}"
        TERRAFORM_DIR = "./Terraform"
        ANSIBLE_PLAYBOOK_DIR = "./Ansible"
        TF_STATE_DIR = "/terraform_state"
    }

    stages {
        stage('Prueba de Dockerfile') {
            steps {
                script {
                    // Construir y probar la imagen de Docker para asegurar que funcione
                    echo 'Construyendo la imagen de Docker para pruebas...'
                    sh 'docker build -t ${DOCKER_IMAGE}${IMAGE_VERSION} .'
                    
                    // Ejecutar pruebas básicas en el contenedor Docker
                    echo 'Ejecutando contenedor para pruebas...'
                    sh 'docker run --rm ${DOCKER_IMAGE}${IMAGE_VERSION} echo "¡El contenedor está funcionando!"'
                    sh 'docker ps --filter "name=ubuntu-ssh-python3.11.${NUMBEROFBUILD}" --format "{{.ID}}"'
                }
            }
        }
        
        stage('Despliegue con Terraform') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        // Inicializar, planificar y aplicar la configuración de Terraform
                        echo 'Inicializando Terraform...'
                        sh 'terraform init -backend-config="path=${TF_STATE_DIR}/terraform.tfstate"'

                        echo 'Formateando TF'
                        sh 'terraform fmt'

                        echo 'Planificando el despliegue de Terraform...'            
                        sh """
                    terraform plan -var="docker_image_name=${DOCKER_IMAGE}" \
                                   -var="docker_image_version=${IMAGE_VERSION}" \
                                   -var="docker_container_name=ubuntu-ssh-python3.11.${NUMBEROFBUILD}" \
                                   -out=tfplan \
                                   -state=${TF_STATE_DIR}/terraform.tfstate
                           """

                        echo 'Aplicando el despliegue de Terraform...'
                        sh "terraform apply -auto-approve tfplan"
                    }
                }
            }
        }

        stage('Aprovisionamiento con Ansible') {
            steps {
                dir("${ANSIBLE_PLAYBOOK_DIR}") {
                    script {
                        // Ejecutar el playbook de Ansible para aprovisionar recursos
                        echo 'Ejecutando playbook de Ansible para aprovisionamiento...'
                        sh 'ansible-playbook -i inventory playbook.yml'
                    }
                }
            }
        }
    }

    post {
        always {
        echo 'Limpiando recursos...'
            deleteDir()  // Limpia el espacio de trabajo después de la construcción
        }
        success {
            echo '¡Pipeline completado con éxito!'
        }
        failure {
            echo 'El pipeline falló. Revisa los registros para más detalles.'
        }
    }
}
